{"mappings":"ICIA,wCAME,IANc,CAAC,gBAAC,aAAa,MAAK,IAAI,CAAQ,CAAC,GAAK,CAAC;IACrD,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACrB,KAAK,EAAE,CAAa;QACpB,YAAY,EAAE,aAAa,GAAG,CAAW,aAAG,CAAO;WAChD,IAAI;IACT,CAAC;AACH,CAAC;;;ACVD,KAAK,CAAC,8BAAQ,GAAG,CAAC;IAAA,CAAW;AAAA,CAAC;AAa9B,KAAK,CAAC,8BAAQ,GAAG,CAAC;IAChB,GAAG,EAAE,IAAI;IACT,WAAW,EAAE,IAAI;IACjB,aAAa,EAAE,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAG,IAAE,CAAC;AAChD,CAAC;IACD,wCAgBE,OAhBmB,CAAC;IACpB,KAAK,CAAC,OAAO,GAAmB,QAAQ,CAAC,aAAa,CAAC,CAAc;IAErE,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,MAAM,EAC7C,GAAG,EAAE,EAAE,GAAK,CAAC;QACZ,KAAK,CAAC,OAAO,GAAG,EAAE;QAClB,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC,SAAS;QAC/B,EAAE,EAAE,KAAK,EACP,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,KAAK;QAEpB,MAAM,CAAC,GAAG;IACZ,CAAC,EACD,CAAC;IAAA,CAAC;IAGJ,MAAM,CAAC,CAAC;WAAI,8BAAQ;WAAK,IAAI;IAAC,CAAC;AACjC,CAAC;;;AClCD,KAAK,CAAC,2BAAK,GAAG,CAAmD;AACjE,KAAK,CAAC,0BAAI,GAAG,CAAmD;AAEhE,KAAK,CAAC,yCAAQ,OAAO,GAAG,GAAK,OAAO,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,CAAC,IAAI,CAAC,CAAI,QAAK,2BAAK;;AACtE,KAAK,CAAC,yCAAO,OAAO,GAAG,GAAK,OAAO,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,CAAC,IAAI,CAAC,CAAI,QAAK,0BAAI;;;;AHMpE,EAAqB,AAArB,mBAAqB;CACpB,QAAQ,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IACzB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;IACjB,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QAAC,CAAW,YAAE,GAAG,CAAC,IAAI,GAAG,OAAO;QAAI,KAAK,EAAE,CAAQ;IAAC,CAAC;IAChE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,oBAAoB,CAAC,CAAC,EAAE,CAAC,GACjC,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,CAAC,GACrB,EAAE,GAAG,CAAC,IAAI,CAAW,aAAG,CAAK,OAAG,CAAC,GAAG,CAAE;IACxC,CAAC,CAAC,KAAK,GAAG,IAAI;IACd,CAAC,CAAC,GAAG,GAAG,CAA6C,+CAAG,CAAC,GAAG,EAAE;IAC9D,CAAC,CAAC,MAAM,OAAS,CAAC;QAChB,yCAAO,CAAC,CAAY;QACpB,EAAE,EAAE,QAAQ,CAAC,UAAU,KAAK,CAAU,WACpC,8BAAQ;aAER,MAAM,CAAC,gBAAgB,CAAC,CAAM,OAAE,8BAAQ;IAE5C,CAAC;IACD,CAAC,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC;AAChC,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAQ,SAAE,CAAW,YAAE,MAAM,CAAC,MAAM;AACzD,EAAyB,AAAzB,uBAAyB;AAEzB,EAAqD,AAArD,mDAAqD;SAC5C,8BAAQ,GAAG,CAAC;IACnB,wCAAQ,CAAC,wCAAW;AACtB,CAAC","sources":["src/index.ts","src/events/pageView.ts","src/utils/getPageData.ts","src/utils/logger.ts"],"sourcesContent":["import pageView from \"./events/pageView\";\nimport getPageData from \"./utils/getPageData\";\nimport { logError, logInfo } from \"./utils/logger\";\ndeclare global {\n  interface Window {\n    GTM_ID: string;\n    dataLayer: any[];\n  }\n}\n\n// Google Tag Manager\n(function (w, d, s, l, i) {\n  w[l] = w[l] || [];\n  w[l].push({ \"gtm.start\": new Date().getTime(), event: \"gtm.js\" });\n  var f = d.getElementsByTagName(s)[0],\n    j = d.createElement(s) as HTMLScriptElement,\n    dl = l != \"dataLayer\" ? \"&l=\" + l : \"\";\n  j.async = true;\n  j.src = \"https://www.googletagmanager.com/gtm.js?id=\" + i + dl;\n  j.onload = () => {\n    logInfo(\"GTM loaded\");\n    if (document.readyState === \"complete\") {\n      __init__();\n    } else {\n      window.addEventListener(\"load\", __init__);\n    }\n  };\n  f.parentNode.insertBefore(j, f);\n})(window, document, \"script\", \"dataLayer\", window.GTM_ID);\n// End Google Tag Manager\n\n// init function to be called when the page is loaded\nfunction __init__() {\n  pageView(getPageData());\n}\n","import { BaseData } from \"../utils/getPageData\";\ninterface LOGIN extends BaseData {\n  __user_name__?: string;\n}\nexport default ({ __user_name__, ...rest }: LOGIN) => {\n  window.dataLayer.push({\n    event: \"page_viewed\",\n    login_status: __user_name__ ? \"logged_in\" : \"guest\",\n    ...rest,\n  });\n};\n","const dataKeys = [\"user-name\"];\ninterface PageData {\n  acc: Record<string, string>;\n  el: HTMLElement;\n  index?: number;\n}\n\ninterface BaseData {\n  crn?: string;\n  customer_id?: string;\n  page_language: string;\n}\n\nconst baseData = {\n  crn: null,\n  customer_id: null,\n  page_language: navigator.language.split(\"-\")[0],\n};\nexport default () => {\n  const dataDiv: HTMLDivElement = document.querySelector(\"#__za_data__\");\n\n  const data = Array.from(dataDiv.children).reduce<Record<string, string>>(\n    (acc, el) => {\n      const element = el as HTMLElement;\n      const value = element.innerText;\n      if (value) {\n        acc[el.id] = value;\n      }\n      return acc;\n    },\n    {}\n  );\n\n  return { ...baseData, ...data };\n};\n\nexport type { BaseData };\n","const error = \"color: #ff0909; font-size: 14px; font-weight:bold\";\nconst info = \"color: #00a0ff; font-size: 14px; font-weight:bold\";\n\nconst logError = (...msg) => console.warn(`%c${msg.join(\"\\n\")}`, error);\nconst logInfo = (...msg) => console.info(`%c${msg.join(\"\\n\")}`, info);\n\nexport { logError, logInfo };\n"],"names":[],"version":3,"file":"main.js.map","sourceRoot":"../"}